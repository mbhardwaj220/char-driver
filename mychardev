// simple char driver
#include<linux/init.h>
#include<linux/fs.h>
#include<asm/uaccess.h>
#include<linux/kernel.h>
#include<linux/cdev.h>
#include<linux/module.h>
#include<linux/types.h>

MODULE_LICENSE("GPL");
//Function Prototypes
int my_open(struct inode *inode, struct file *filp);
int my_release(struct inode *indoe, struct file *filp);
ssize_t my_write(struct file *filp, const char __user *Ubuff, size_t count, loff_t  *offp);
ssize_t my_read(struct file *filp, char __user *Ubuff, size_t count, loff_t  *offp);

// struct that defines the operations that the driver provide
struct file_operations fops ={
  .owner  = THIS_MODULE,
  .open   = my_open,
  .read   = my_read,
  .write  = my_write,
  .release = my_release,
};
// structure for char driver
struct cdev *my_cdev;
dev_t mydev;  //device number(major+minor)

// init MODULE
static int __init mychardrv_init(void)
{
  int res;
  int MAJOR,MINOR;
  res= alloc_chrdev_region(&mydev,0,1,"MyCharDriver");
  if(res<0)
  {
    printk(KERN_ALERT "\nThe Region requested for is not obtainable\n");
		return(-1);
  }
  MAJOR=MAJOR(mydev);
	MINOR=MINOR(mydev);
	printk("\nThe Major Number is %d...THe Minor Number is %d\n",MAJOR,MINOR);



	my_cdev = cdev_alloc();//allocate memory to Char Device structure
	my_cdev->ops = &fops;//link our file operations to the char device

	res=cdev_add(my_cdev,mydev,1);//Notify the kernel abt the new device
	if(res<0)
	{
		printk(KERN_ALERT "\nThe Char Devide has not been created......\n");
		return (-1);
	}
	return 0;
}

//Cleanup Module
void __exit CharDevice_exit(void)
{
	unregister_chrdev_region(mydev,1);//unregister the device numbers and the device created
	cdev_del(my_cdev);
	printk(KERN_ALERT "\nI have unregistered the stuff that was allocated.....Goodbye.....\n");
	return;
}

//Open System Call
int my_open(struct inode *inode, struct file *filp)
{
	printk(KERN_ALERT "\nThis is the Kernel....Open Call\n");
	return 0;
}

//Close System Call
int my_release(struct inode *indoe, struct file *filp)
{
	printk(KERN_ALERT "\nThis is the release method of my Character Driver\n");
	return 0;
}


//Write Functionality
ssize_t my_write(struct file *filp, const char __user *Ubuff, size_t count, loff_t  *offp)
{
	char Kbuff[120];
	int result;
	ssize_t retval;

	result=raw_copy_from_user((char *)Kbuff , (char *)Ubuff , count);
	if(result == 0)
	{
		printk(KERN_ALERT "\nMessage from the user......\n %s\n",Kbuff);
                printk(KERN_ALERT "\n %ld bytes of data Successfully Written.....\n",count);
                retval=count;
                return retval;

	}
	else
	{
		printk(KERN_ALERT "\n Error Writing Data\n");
                retval=-EFAULT;
                return retval;

	}
}


//read Functionality
ssize_t my_read(struct file *filp, char __user *Ubuff, size_t count, loff_t  *offp)
{
	char Kbuff[]="Iam sending from Kernel buffer";
	int result;
	ssize_t retval;

	result=raw_copy_to_user((char *)Ubuff,(const char *)Kbuff,sizeof(Kbuff));
	if(result == 0)
	{
		printk(KERN_INFO"copy to user space is successfully written%ld\n",sizeof(Kbuff));
		retval = sizeof(Kbuff);
		return retval;
	}
	else
  {
    printk(KERN_ALERT"\n Error Writing Data to User\n");
    retval=-EFAULT;
    return retval;
  }


}

//Module over ride functions
module_init(mychardrv_init);
module_exit(CharDevice_exit);
